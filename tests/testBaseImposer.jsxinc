/**
 * Setup
 */
Indigo.Tests.testBaseImposer = function() {};
Indigo.Tests.testBaseImposer.prototype = new Indigo.Tests.testSuite(app);
Indigo.Tests.testBaseImposer.prototype.constructor = Indigo.Tests.testBaseImposer;
Indigo.Tests.testBaseImposer.prototype.name = "testBaseImposer";

Indigo.Tests.testBaseImposer.prototype.setUp = function () {
	this.pocient = new Indigo.BaseImposer(this.app);
	this.pocient.setup(this.getMockJob());
};

/**
 * Test
 */
Indigo.Tests.testBaseImposer.prototype.run = function() {
	//
	// getLabels()
	//
	var labels = this.pocient.getLabels();
	var resultAr = this.assertInstanceOf(labels, Array);
	var resultCn = this.assertEq(labels.length, 2);
	this.log(resultAr, 'getLabes(): Returns array');
	this.log(resultCn, 'Labels array has expected length');
	//
	// isNeed() true
	//
	this.log(this.assertEq(this.pocient.isNeed(), true), 'inNeed() is true when labels > 1');
	//
	// setNameRange()
	//
	// Последовательный диапазон
	var longRange = this.pocient.setNameRange();
	var resultLong = this.assertEq(longRange, '001_002');
	this.log(resultLong, 'setNameRange(): Sequent labels concatenated');
	// Повторяющийся диапазон
	this.pocient.labels.push(this.pocient.labels[0]);
	var dupRange = this.pocient.setNameRange();
	var resultDup = this.assertEq(dupRange, '001_002');
	this.log(resultDup, 'setNameRange(): Duplicate labels merged');
	// Одна этикетка
	this.pocient.labels = [ this.pocient.labels[0] ];
	var oneRange = this.pocient.setNameRange();
	var resultOne = this.assertEq(oneRange, '001');
	this.log(resultOne, 'setNameRange(): Single label passed');
	//
	// isNeed() false
	//
	this.log(this.assertEq(this.pocient.isNeed(), false), 'inNeed() is false when labels === 1');
	//
	// send()
	//
	this.pocient.job._id = 'unitTest';	
	// Нету messenger в этой инкарнации
	delete this.pocient.messenger;
	this.log(this.assertEq(this.pocient.send('question','main'), false), 'send() without messenger');
	// Начинаем подсовывать самозванцев: якобы мессенджеров с готовыми вариантами запросов
	this.pocient.messenger = {
		test: this,
		send: function(type, wrapper) {
			var suite = this.test;
			var isOmitType = ((type === null) && (wrapper.jobid === 'unitTest') && (wrapper.result.data.type === 'question'));
			suite.log(suite.assertEq(isOmitType, true), 'send() without type parameter');
		},
	};
	this.pocient.send({type: 'question'});
	this.pocient.messenger = {
		test: this,
		send: function(type, wrapper) {
			var suite = this.test;
			var isOmitType = ((type === 'question') && (wrapper.jobid === 'unitTest') && (wrapper.result.data.severity === 'main'));
			suite.log(suite.assertEq(isOmitType, true), 'send() with type parameter');
		},
	};
	this.pocient.send('question', {severity: 'main'});
	// Ответ -- 42
};

/**
 * Superclass override: do nothing;
 */
Indigo.Tests.testBaseImposer.prototype.tearDown = function() {
};
