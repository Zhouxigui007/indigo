/**
 * 
 * @classdesc testTemplateScanner
 * 
 * @constructor
 */
Indigo.Tests.testTemplateScanner = function() {};
Indigo.Tests.testTemplateScanner.prototype = new Indigo.Tests.testSuite(app);
Indigo.Tests.testTemplateScanner.prototype.constructor = Indigo.Tests.testTemplateScanner;
Indigo.Tests.testTemplateScanner.prototype.name = 'testTemplateScanner';

Indigo.Tests.testTemplateScanner.prototype.setUp = function () {
	this.pocient = new Indigo.TemplateScanner(this.app);
	this.pocient.setup(this.getMockJob());
	this.pocient.templateFolder = new Folder(this.testsFilesFolder + this.name);
};

/**
 * Test
 */
Indigo.Tests.testTemplateScanner.prototype.run = function() {

	// getTemplates()
	this.pocient.job.templates = ['t-01', 't-03'];
	this.pocient.getTemplates();
	var templatesList = this.assertEq(this.pocient.templates.length, 1);
	this.log(templatesList, 'Filter templates: find expected');
	var filteredName = this.pocient.templates[0].name;
	var filtered = this.assertEq(filteredName, 't-02.ait');
	this.log(filtered, 'Filter templates: find expected file');

	this.pocient.job.templates = ['t-01', 't-02', 't-03'];
	this.pocient.getTemplates();
	templatesList = this.assertEq(this.pocient.templates.length, 0);
	this.log(templatesList, 'Filter templates: nothing found');

	this.pocient.job.templates = [];
	this.pocient.getTemplates();
	templatesList = this.assertEq(this.pocient.templates.length, 3);
	this.log(templatesList, 'Filter templates: find all');

	// Run
	this.pocient.chunkSize = 2;
	var sendCount = 0;
	var expectedSpecs = [];
	// Инъекция send():
	this.pocient.send = function(status, data) {
		if (sendCount === 0) {
			expectedSpecs.push(data[0]);
			expectedSpecs.push(data[1]);
		}
		if (sendCount === 1) {
			expectedSpecs.push(data[0]);
		}
		++sendCount;
	};

	this.pocient.job.templates = [];
	var templatesSpecs = this.pocient.run();
	this.log(this.assertEq(this.pocient.templates.length, 0), 'Processed Templates array is empty');
	this.log(this.assertEq(templatesSpecs.affected, 3), 'Responce with number of affected documents');
	this.log(this.assertEq(sendCount, 2), 'Method send() called twice');
	
	var spec = expectedSpecs[0];
	this.log(this.assertEq(spec.name, 't-01'), 'Template data: template name t-01');
	this.log(this.assertEq(spec.status, 'done'), 't-01: Status is ok');
	this.log(this.assertEq(spec.width, 215.433), 't-01: Width is ok');
	this.log(this.assertEq(spec.height, 394.016), 't-01: Height is ok');

	spec = expectedSpecs[1];
	this.log(this.assertEq(spec.name, 't-02'), 'Template data: template name t-02');
	this.log(this.assertEq(spec.status, 'error'), 't-02: Status is error');
	this.log(this.assertInstanceOf(spec.errors, Array), 't-02: Has errors array');
	this.log(this.assertEq(spec.errors.length, 2), 't-02: Has exact number of errors');
	this.log(this.assertEq(spec.errors[0], 'Rolls unstable'), 't-02: Expected error message 1');
	this.log(this.assertEq(spec.errors[1], 'Roll "roll_2_5" absent'), 't-02: Expected error message 2');

	spec = expectedSpecs[2];
	this.log(this.assertEq(spec.name, 't-03'), 'Template data: template name t-03');
	this.log(this.assertEq(spec.status, 'error'), 't-03: Status is error');
	this.log(this.assertInstanceOf(spec.errors, Array), 't-03: Has errors array');
	this.log(this.assertEq(spec.errors.length, 1), 't-03: Has exact number of errors');
	this.log(this.assertEq(spec.errors[0], 'No "cut" layer in template'), 't-03: Expected error message');

	this.pocient.templateFolder = new Folder('/dev/random');
	var exc = this.assertThrows(this.pocient.getTemplates, 'Template folder not found');
	this.log(exc, 'Throws expected exception if template folder missing');
};

Indigo.Tests.testTemplateScanner.prototype.tearDown = function() {};
